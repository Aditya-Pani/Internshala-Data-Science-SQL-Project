-- CREATING TABLE IPL_BALL AND IMPORTING DATA FROM CSV FILE.

CREATE TABLE IPL_BALL(
ID INT,
INNING INT,
OVER INT,
BALL INT,
BATSMAN VARCHAR,
NON_STRIKER VARCHAR,
BOWLER VARCHAR,
BATSMAN_RUNS INT,
EXTRA_RUNS INT,
TOTAL_RUNS INT,
WICKET INT,
DISMISSAL_KIND VARCHAR,
PLAYER_DISMISSED VARCHAR,
FIELDER VARCHAR,
EXTRA_TYPE VARCHAR,
BATTING_TEAM VARCHAR,
BOWLING_TEAM VARCHAR);

COPY IPL_BALL FROM 'C:\Program Files\PostgreSQL\16\data\Files\IPL Dataset\IPL_BALL.CSV'
DELIMITER ',' CSV HEADER;

--CREATING TABLE IPL_MATCH AND IMPORTING DATA FROM CSV FILE

CREATE TABLE IPL_MATCH(
ID INT,
CITY VARCHAR,
DATE DATE,
PLAYER_OF_MATCH VARCHAR,
VENUE VARCHAR,
NEUTRAL_VENUE VARCHAR,
TEAM_1 VARCHAR,
TEAM_2 VARCHAR,
TOSS_WINNER VARCHAR,
TOSS_DECISION VARCHAR,
WINNER VARCHAR,
RESULTS VARCHAR,
RESULT_MARGIN INT,
ELIMINATOR VARCHAR,
METHOD VARCHAR,
UMPIRE_1 VARCHAR,
UMPIRE_2 VARCHAR);

COPY IPL_MATCH FROM 'C:\Program Files\PostgreSQL\16\data\Files\IPL Dataset\IPL_MATCHES.CSV'
DELIMITER ',' CSV HEADER; 

-- LIST OF 10 AGGRESSIVE PLAYERS WITH GOOD STRIKE_RATE.

SELECT BATSMAN,SUM(BATSMAN_RUNS) AS TOTAL_RUNS,COUNT(BALL) AS BALLS_PLAYED,
ROUND((SUM(BATSMAN_RUNS)*1.0/COUNT(BALL))*100,2) AS STRIKE_RATE
FROM IPL_BALL
WHERE EXTRA_TYPE NOT IN ('wides')
GROUP BY BATSMAN
HAVING COUNT(BALL)>500
ORDER BY STRIKE_RATE DESC
LIMIT 10;

-- LIST OF 10 ANCHOR BATSMAN WITH GOOD AVERAGE

SELECT BATSMAN,SUM(BATSMAN_RUNS) AS BATSMAN_RUN,SUM(WICKET) AS DISMISSED,
ROUND((SUM(BATSMAN_RUNS)*1.0/SUM(WICKET)),2) AS AVERAGE
FROM IPL_BALL
GROUP BY BATSMAN
HAVING SUM(WICKET)>0 AND COUNT(DISTINCT ID)>28
ORDER BY AVERAGE DESC
LIMIT 10;

-- LIST OF 10 HARD HITTING BATSMAN WITH HIGHEST BOUNDARY PERCENTAGE

SELECT BATSMAN,SUM(BATSMAN_RUNS) AS TOTAL_RUNS,
SUM(CASE WHEN BATSMAN_RUNS IN (4) THEN BATSMAN_RUNS ELSE 0 END) AS SUM_FOUR,
SUM(CASE WHEN BATSMAN_RUNS IN (6) THEN BATSMAN_RUNS ELSE 0 END) AS SUM_SIX,
ROUND(SUM(CASE WHEN BATSMAN_RUNS IN (4,6) THEN BATSMAN_RUNS ELSE 0 END)*1.0/SUM(BATSMAN_RUNS)*100,2) AS PERCENTAGE_BOUNDARIES
FROM IPL_BALL
WHERE EXTRA_TYPE NOT IN ('Wides')
GROUP BY BATSMAN
HAVING COUNT (DISTINCT ID) > 28
ORDER BY PERCENTAGE_BOUNDARIES DESC
LIMIT 10; 

-- LIST OF 10 BOWLERS WITH GOOD ECONOMY

SELECT BOWLER,SUM(TOTAL_RUNS) AS RUNS_CONCEDED,COUNT(BALL) AS BALL_DELIVERED,
ROUND(SUM(TOTAL_RUNS)/(COUNT(BALL)/6.0),2) AS ECONOMY
FROM IPL_BALL
GROUP BY BOWLER
HAVING COUNT(BALL) > 500
ORDER BY ECONOMY
LIMIT 10;

-- LIST OF 10 BOWLERS WITH GOOD BOWLING STRIKE RATE.

SELECT BOWLER,COUNT(BALL) AS BALLS_DELIVERED,
SUM(CASE WHEN DISMISSAL_KIND IN ('caught','bowled','caught and bowled','lbw','stumped','hitwicket') THEN 1 ELSE 0 END) AS WICKET_TAKEN,
ROUND(COUNT(BALL)*1.0/SUM(CASE WHEN DISMISSAL_KIND IN ('caught','bowled','caught and bowled','lbw','stumped','hitwicket') THEN 1 ELSE 0 END),2) AS STRIKE_RATE
FROM IPL_BALL
GROUP BY BOWLER
HAVING COUNT(BALL)>500
ORDER BY STRIKE_RATE
LIMIT 10;

--  LIST OF 10 ALL_ROUNDERS WITH GOOD BATTING AND BOWLING STRIKE_RATE.

SELECT A.*,B.BALLS_DELIVERED,B.WICKET_TAKEN,B.STRIKE_RATE_AS_BOWLER
FROM (SELECT BATSMAN AS PLAYERS,SUM(BATSMAN_RUNS) AS TOTAL_RUNS,COUNT(BALL) AS BALLS_PLAYED,
ROUND(SUM(BATSMAN_RUNS)*100/(COUNT(BALL)*1.0),2) AS STRIKE_RATE_AS_BATSMAN
FROM IPL_BALL
WHERE EXTRA_TYPE NOT IN ('wides')
GROUP BY BATSMAN
HAVING COUNT(BALL)>500
ORDER BY STRIKE_RATE_AS_BATSMAN DESC)
AS A INNER JOIN
(SELECT BOWLER AS PLAYERS,COUNT(BALL) AS BALLS_DELIVERED,
SUM(CASE WHEN DISMISSAL_KIND IN ('caught','bowled','caught and bowled','lbw','stumped','hitwicket') THEN 1 ELSE 0 END) AS WICKET_TAKEN,
ROUND(COUNT(BALL)*1.0/SUM(CASE WHEN DISMISSAL_KIND IN ('caught','bowled','caught and bowled','lbw','stumped','hitwicket') THEN 1 ELSE 0 END),2) AS STRIKE_RATE_AS_BOWLER
FROM IPL_BALL
GROUP BY BOWLER
HAVING COUNT(BALL)>300
ORDER BY STRIKE_RATE_AS_BOWLER) AS B
ON A.PLAYERS=B.PLAYERS
LIMIT 10;

-- Q1

SELECT COUNT(DISTINCT(CITY)) AS CITY_COUNT 
FROM IPL_MATCH;

--Q2

CREATE TABLE DELIVERIES_V02 AS SELECT *, CASE 
				WHEN TOTAL_RUNS >= 4 THEN 'Boundary'
				WHEN TOTAL_RUNS= 0 THEN 'DOT'
				ELSE 'OTHERS'
		  END AS BALL_RESULT
		  FROM IPL_BALL;

--Q3

SELECT BALL_RESULT AS BALL_RESULT, COUNT(BALL_RESULT) AS BALL_COUNT
FROM DELIVERIES_V02
WHERE BALL_RESULT NOT IN ('OTHERS')
GROUP BY BALL_RESULT;

-- Q4

SELECT BATTING_TEAM,COUNT(BALL_RESULT) AS BOUNDARY_COUNT 
FROM DELIVERIES_V02
WHERE BALL_RESULT IN ('Boundary')
GROUP BY BATTING_TEAM 
ORDER BY BOUNDARY_COUNT DESC;

--Q5 

SELECT BOWLING_TEAM,COUNT(TOTAL_RUNS) AS DOT_COUNT 
FROM IPL_BALL
WHERE TOTAL_RUNS = 0 AND BOWLING_TEAM NOT IN ('NA')
GROUP BY BOWLING_TEAM 
ORDER BY DOT_COUNT DESC;

-- Q6

SELECT DISMISSAL_KIND,COUNT(DISMISSAL_KIND) AS DISMISSAL_COUNT
FROM DELIVERIES_V02
WHERE DISMISSAL_KIND NOT IN ('NA')
GROUP BY DISMISSAL_KIND;

-- Q7

SELECT BOWLER AS PLAYER,SUM(EXTRA_RUNS) AS EXTRA_RUN
FROM DELIVERIES_V02
GROUP BY BOWLER
ORDER BY EXTRA_RUN DESC
LIMIT 5;

-- Q8

CREATE TABLE DELIVERIES_V03 AS 
SELECT A.*,B.VENUE,B.DATE
FROM DELIVERIES_V02 AS A
LEFT JOIN IPL_MATCH AS B
ON A.ID=B.ID;

-- Q9

SELECT VENUE,SUM(TOTAL_RUNS) AS RUNS_CONCEDED_IN_VENUE
FROM DELIVERIES_V03
GROUP BY VENUE
ORDER BY RUNS_CONCEDED_IN_VENUE DESC;

--Q10

SELECT EXTRACT(YEAR FROM DATE) AS YEAR,SUM (TOTAL_RUNS) AS TOTAL_RUNS
FROM DELIVERIES_V03
WHERE VENUE = 'Eden Gardens'
GROUP BY YEAR
ORDER BY TOTAL_RUNS DESC;










-- 


